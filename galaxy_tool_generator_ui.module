<?php

require drupal_get_path('module', 'galaxy_tool_generator_ui') . '/galaxy_tool_generator_ui.api.inc';
require 'GalaxyToolshed/GalaxyToolshed.php';
require 'GalaxyToolshed/GalaxyToolshedRequest.php';
require 'GalaxyToolshed/GalaxyToolshedResponse.php';
require 'GalaxyToolshed/GTRepositories.php';


/**
 * Implements hook_init().
 */
function galaxy_tool_generator_ui_init() {
  $library = libraries_detect('blend4php');
  if (!$library) {
    drupal_set_message(t('The blend4php library is not installed. Please <code>git clone</code> 
        the module from ' . l('here', 'https://github.com/galaxyproject/blend4php.git') .
      ' and place it into the <span style="color: #FF5666">sites/all/libraries/</span> directory.'), 'warning');
  }

  // Try to load the blend4php library.
  $library = libraries_load('blend4php');
  if (empty($library['loaded'])) {
    drupal_set_message(t('The <code>blend4php</code> library loading failed!'), 'warning');
  }
}


/**
 * Implements hook_libraries_info().
 */
function galaxy_tool_generator_ui_libraries_info() {
  $libraries['blend4php'] = [
    'name' => 'blend4php',
    'vendor url' => 'https://github.com/galaxyproject/blend4php',
    'download url' => 'https://github.com/galaxyproject/blend4php',
    'version arguments' => [
      'file' => 'version.txt',
      'pattern' => '/^(.*)$/',
      'lines' => 1,
    ],
    'files' => [
      'php' => ['galaxy.inc'],
    ],
  ];

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function galaxy_tool_generator_ui_menu() {
  $items['api_keys'] = [
    'title' => 'API Keys',
    'description' => t('A page to collect API keys for tool development and testing'),
    'page callback' => 'api_keys_page',
    'access callback' => 'user_is_logged_in',
//    'access arguments' => ['access content'],
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'api_keys.form.inc',
    'file path' => drupal_get_path('module', 'galaxy_tool_generator_ui') . '/includes',
    'weight' => 0,
  ];
  $items['all_galaxy_tool_xmls'] = [
    'title' => 'All Tool XMLs',
    'description' => t('A page to view all Galaxy tool XMLs'),
    'page callback' => 'galaxy_tool_xml_all_page',
    'access arguments' => ['access content'],
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'galaxy_tool_xml_all.form.inc',
    'file path' => drupal_get_path('module', 'galaxy_tool_generator_ui') . '/includes',
    'weight' => 2,
  ];
  $items['publish_to_test_tool_shed'] = [
    'title' => 'Publish to Test Tool Shed',
    'description' => t('A page for publishing tools to testtoolshed.'),
    'page callback' => 'publish_to_test_tool_shed_page',
    'access callback' => 'user_is_logged_in',
//    'access arguments' => ['access content'],
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'publish_to_test_tool_shed.form.inc',
    'file path' => drupal_get_path('module', 'galaxy_tool_generator_ui') . '/includes',
    'weight' => 3,
  ];
  $items['publish_to_tool_shed'] = [
    'title' => 'Publish to Tool Shed',
    'description' => t('A page for publishing tools to toolshed.'),
    'page callback' => 'publish_to_tool_shed_page',
    'access callback' => 'user_is_logged_in',
//    'access arguments' => ['access content'],
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'publish_to_tool_shed.form.inc',
    'file path' => drupal_get_path('module', 'galaxy_tool_generator_ui') . '/includes',
    'weight' => 5,
  ];

  return $items;
}

/**
 * Page callback for all_tool_repositories page.
 */
function galaxy_tool_xml_all_page() {
  return drupal_get_form('galaxy_tool_xml_all_form');
}

/**
 * page callback for associate accounts.
 */
function api_keys_page() {
  return drupal_get_form('api_keys_form');
}

/**
 * Page callback for publish_tool page.
 */
function publish_to_test_tool_shed_page() {
  // TODO: build a form to list all xml files and the galaxy tool directory it comes from
  return drupal_get_form('publish_to_test_tool_shed_form');
}

/**
 * page callback for testing tool on galaxy server.
 *
 * @return mixed
 */
//function test_tool_on_galaxy_server_page()
//{
//    return drupal_get_form('test_tool_on_galaxy_server_form');
//}

function publish_to_tool_shed_page() {
  return drupal_get_form('publish_to_tool_shed_form');
}


/**
 * Implements hook_menu_alter().
 */
function galaxy_tool_generator_ui_menu_alter(&$items) {
  unset($items['node/%webform_menu/webform/components']);
  unset($items['node/%webform_menu/webform/conditionals']);
  unset($items['node/%webform_menu/webform/emails']);
  unset($items['node/%webform_menu/webform/configure']);
  $items['node/%webform_menu/webform']['title'] = 'XML components';


  foreach (array_keys($items) as $menu_link) {
    // remove unneeded menu items for webform.
    if (preg_match('/webform-results/', $menu_link)) {
      unset($items[$menu_link]);
    }
  }

  // hide webform node edit page
  $items['node/%node/edit']['access callback'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function galaxy_tool_generator_ui_form_webform_node_form_alter(&$form, &$form_state, $form_id) {
  // change field title from the form on the add-webform page
  $form['title'] = [
    '#type' => 'textfield',
    '#title' => t('XML file name'),
    '#description' => t('Galaxy tool XML file name with extension, e.g. <span style="color: #FF5666">hisat2.xml, bowtie2.xml</span>.'),
    '#required' => TRUE,
    '#maxlength' => 255,
    '#weight' => -5,
  ];
  $form['tool_synopsis'] = [
    '#type' => 'textarea',
    '#title' => t('Tool synopsis'),
    '#description' => t('A short description about this tool'),
    '#required' => TRUE,
  ];
  $form['tool_description'] = [
    '#type' => 'textarea',
    '#title' => t('Tool description'),
    '#description' => t('Detailed information about this tool'),
    '#required' => TRUE,
  ];
  $form['tool_categories'] = [
    '#type' => 'textfield',
    '#title' => t('Tool categories'),
    '#description' => t('A list of general categories that this tool belongs to'),
  ];
  // add submit handler
  $form['actions']['submit']['#submit'][] = 'create_galaxy_tool';
  // add form validator
  $form['#validate'][] = 'create_galaxy_tool_form_validate';
  // unset preview button
  unset($form['actions']['preview']);

}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function galaxy_tool_generator_ui_form_node_delete_confirm_alter(&$form, &$form_state, $form_id) {
  // add a new submission function 'node_delete_confirm_delete_xml' to delete corresponding xml file.
  // this function has to be run after the original submit function 'node_delete_confirm_submit', which delete the webform node.
  $form['#submit'] = [
    'node_delete_confirm_delete_xml',
    'node_delete_confirm_submit',
    'node_delete_confirm_redirect',
  ];
//  $form['description']['#markup'] = '<span style="color: #FF5666">This action cannot be undone. If all XML
//    files from a tool repository are deleted, the tool repository will be removed.</span>';
  $form['actions']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Delete XML'),
  ];
}

/**
 * submit function to delete xml file when a webform node is deleted.
 */
function node_delete_confirm_delete_xml(&$form, &$form_state) {

  $nid = $form['#node']->nid;
  $res = db_select('node', 'n')
    ->fields('n')
    ->condition('nid', $nid)
    ->execute()
    ->fetchAssoc();
  // delete xml file
  $xml_file = file_load($res['tool_xml_fid']);
  file_delete($xml_file);
}


/**
 * submit callback which runs after the original submit callback
 * 'node_delete_confirm_submit'. The goal is to redirect page to the all tool
 * repositories page, instead of the front page by default.
 */
function node_delete_confirm_redirect(&$form, &$form_state) {
  $form_state['redirect'] = 'all_galaxy_tool_xmls';
}

/**
 * webform_node_form form submitter.
 */
function create_galaxy_tool($form, &$form_state) {

  // add galaxy_tool_name to node table for later use.
  db_update('node')
    ->fields([
      'galaxy_tool_xml_name' => $form_state['values']['title'],
      'tool_synopsis' => $form_state['values']['tool_synopsis'],
      'tool_description' => $form_state['values']['tool_description'],
      'tool_categories' => $form_state['values']['tool_categories'],
    ])
    ->condition('nid', $form_state['values']['nid'])
    ->execute();

  // use default R Markdown XML file
  // add default components to webform_component table if choose to start with tool template
  foreach (get_tool_template_components() as $component) {
    $component['nid'] = $form_state['values']['nid'];
    db_insert('webform_component')
      ->fields($component)
      ->execute();
  }
}

/**
 * Create galaxy tool form validator
 */
function create_galaxy_tool_form_validate($form, &$form_state) {
  //  if ($form_state['values']['existing_or_new_tool_repository'] == 'New') {
  //    //==========validate galaxy tool name=====
  //    $galaxy_tool_name = $form_state['values']['new_galaxy_tool_repository'];
  //    $directory = 'public://galaxy_tools/' . $galaxy_tool_name;
  //    // check if directory already exists.
  //    if (is_dir($directory)) {
  //      form_set_error('new_galaxy_tool_repository', t('This Galaxy tool name already exists. Please use a different name.'));
  //    }
  //    // check if galaxy tool name is legal.
  //    if (!preg_match('/^[a-z]+[a-z0-9_]*$/', $galaxy_tool_name)) {
  //      form_set_error('new_galaxy_tool_repository', t('Repository name can only contains <span style="color: #FF5666">"a-z"</span>,
  //        <span style="color: #FF5666">"0-9"</span> and <span style="color: #FF5666">"_"</span>,
  //        and starts with letters.'));
  //    }
  //  }
  //  else {
  //    if (!isset($form_state['values']['existing_galaxy_tool'])) {
  //      form_set_error('existing_galaxy_tool', t('No existing galaxy tools are available. Please create a new tool repository first.'));
  //      return;
  //    }
  //    else {
  //      // no need to check galaxy tool name from existing galaxy tools list.
  //      $galaxy_tool_name = $form_state['values']['existing_galaxy_tool'];
  //      $directory = 'public://galaxy_tools/' . $galaxy_tool_name;
  //    }
  //  }

  //==========validate xml file name========
  if (!preg_match('/^[a-z]+[a-z0-9_]*\.xml/', $form_state['values']['title'])) {
    form_set_error('', t('File name can only contains <span style="color: #FF5666">"a-z"</span>, 
        <span style="color: #FF5666">"0-9"</span> and <span style="color: #FF5666">"_"</span>, 
        and starts with letters and ends with exsion <span style="color: #FF5666">.xml</span>'));
  }
  //  $xml_file = $form_state['values']['title'] . '.xml';
  //  $xml_file_path = $directory . '/' . $xml_file;
  //  if (file_exists($xml_file_path)) {
  //    form_set_error('title', t('The file ' . $xml_file . ' already exists. Please use a different name.'));
  //  }

  //  //==========handle uploaded xml file======
  //  $file = file_save_upload('start_with_custom_xml');
  //
  //  if (isset($file)) {
  //    if ($file) {
  //      $form_state['values']['start_with_custom_xml'] = $file;
  //    }
  //    else {
  //      form_set_error('start_with_custom_xml', t('The file could not be uploaded'));
  //    }
  //  }
}

/**
 * implement hook_node_view_alter().
 */
function galaxy_tool_generator_ui_node_view_alter(&$build) {
  // TODO: display xml file name and galaxy tool name (which directory the xml file comes from)
  // TODO: write XML components into XML file
}

/**
 * @param $node
 * @param $view_mode
 * @param $langcode
 *
 * implement hook_node_view
 *
 */
function galaxy_tool_generator_ui_node_view($node, $view_mode, $langcode) {
  // create a directory to store all galaxy tool xml files
  $galaxy_tool_xml_dir = 'public://galaxy_tool_XMLs';
  file_prepare_directory($galaxy_tool_xml_dir, FILE_CREATE_DIRECTORY);

  if (!isset($node->webform)) {
    return;
  }
  // get galaxy tool xml file name;
  $query = db_select('node', 'n')
    ->fields('n')
    ->condition('nid', $node->nid, '=')
    ->execute()
    ->fetchAssoc();
  //use nid as prefix of the file name
  $galaxy_tool_xml_name = $node->nid . '_' . $query['galaxy_tool_xml_name'];
  // write xml components into xml file.
  $xml_file_path = 'public://galaxy_tool_XMLs/' . $galaxy_tool_xml_name;
  $xml = build_galaxy_tool_xml($node->webform['components']);
  // remove version tag from xml string
  $xml_no_version_tag = str_replace("<?xml version=\"1.0\"?>\n", '', $xml);
  // save xml string to a file and create a database entry
  $file = file_save_data($xml_no_version_tag, $xml_file_path, FILE_EXISTS_REPLACE);
  // insert xml file info into node table
  db_update('node')
    ->fields([
      'tool_xml_fid' => $file->fid,
      'tool_xml_uri' => $file->uri,
      'galaxy_tool_xml_node' => 1,
    ])
    ->condition('nid', $node->nid)
    ->execute();
}