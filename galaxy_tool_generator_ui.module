<?php

require drupal_get_path('module', 'galaxy_tool_generator_ui') . '/galaxy_tool_generator_ui.api.inc';

const AURORA_TOOL_TEMPLATES_URL = 'https://raw.githubusercontent.com/statonlab/aurora-galaxy-tools/master/aurora-tool-templates/';

const RMARKDOWN_REPORT_XML = AURORA_TOOL_TEMPLATES_URL . 'rmarkdown_report.xml';
const RMARKDOWN_REPORT_RENDER = AURORA_TOOL_TEMPLATES_URL . 'rmarkdown_report_render.R';
const RMARKDOWN_REPORT_RMD = AURORA_TOOL_TEMPLATES_URL . 'rmarkdown_report.Rmd';

const RMARKDOWN_HELPER_R = AURORA_TOOL_TEMPLATES_URL . 'helper.R';
const RMARKDOWN_GETOPT_CSV = AURORA_TOOL_TEMPLATES_URL . 'getopt_specification.csv';
const RMARKDOWN_EXPOSE_OUTPUTS = AURORA_TOOL_TEMPLATES_URL . 'expose-outputs.sh';
const RMARKDOWN_SHELL_TEMPLATE = AURORA_TOOL_TEMPLATES_URL . 'shell-script-template.sh';
const RMARKDOWN_JSTREE = AURORA_TOOL_TEMPLATES_URL . 'vakata-jstree-3.3.5.zip';



//const RMARKDOWN_WEBSITE_XML = AURORA_TOOL_TEMPLATES_URL . 'rmarkdown-website/rmarkdown_site.xml';
//const RMARKDOWN_WEBSITE_YML = AURORA_TOOL_TEMPLATES_URL . 'rmarkdown-website/_site.yml';
//const RMARKDOWN_WEBSITE_INDEX_RMD = AURORA_TOOL_TEMPLATES_URL . 'rmarkdown-website/index.Rmd';
//const RMARKDOWN_WEBSITE_RENDER = AURORA_TOOL_TEMPLATES_URL . 'rmarkdown-website/rmarkdown_site_render.R';


/**
 * Implements hook_init().
 */
function galaxy_tool_generator_ui_init() {
  //  $library = libraries_detect('blend4php');
  //  if (!$library) {
  //    drupal_set_message(t('The blend4php library is not installed. Please <code>git clone</code>
  //        the module from ' . l('here', 'https://github.com/galaxyproject/blend4php.git') .
  //      ' and place it into the <span style="color: #FF5666">sites/all/libraries/</span> directory.'), 'warning');
  //  }
  //
  //  // Try to load the blend4php library.
  //  $library = libraries_load('blend4php');
  //  if (empty($library['loaded'])) {
  //    drupal_set_message(t('The <code>blend4php</code> library loading failed!'), 'warning');
  //  }

  if (current_path() == 'node') {
    drupal_goto('node/add/webform');
  }
}

/**
 * Implements hook_process_HOOK().
 */
function galaxy_tool_generator_ui_process_page(&$variables) {
  $variables['breadcrumb'] = NULL;
  //  $variables['logo'] = NULL;
  $variables['logo'] = '/' . drupal_get_path('module', 'galaxy_tool_generator_ui') . '/images/gtg-logo-87_93.png';
  $variables['site_name'] = 'Galaxy Tool Generator';
  $variables['site_slogan'] = 'Making Galaxy tool development easier!';
  $variables['front_page'] = '/node/add/webform';
  // change page title
  if (current_path() == 'node/add/webform') {
    $variables['title'] = 'Create Tool XML';
  }

}

/**
 * Implements hook_libraries_info().
 */
function galaxy_tool_generator_ui_libraries_info() {
  $libraries['blend4php'] = [
    'name' => 'blend4php',
    'vendor url' => 'https://github.com/galaxyproject/blend4php',
    'download url' => 'https://github.com/galaxyproject/blend4php',
    'version arguments' => [
      'file' => 'version.txt',
      'pattern' => '/^(.*)$/',
      'lines' => 1,
    ],
    'files' => [
      'php' => ['galaxy.inc'],
    ],
  ];

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function galaxy_tool_generator_ui_menu() {
//  $items['gtg_flowchart'] = [
//    'title' => 'GTG Flowchart',
//    'description' => t('A page to dispaly GTG flowchart.'),
//    'page callback' => 'gtg_flowchart_page',
//    'access arguments' => ['access content'],
//    'menu_name' => 'main-menu',
//    'type' => MENU_NORMAL_ITEM,
//    'weight' => 1,
//  ];
  $items['api_keys'] = [
    'title' => 'API Keys',
    'description' => t('A page to collect API keys for tool development and testing'),
    'page callback' => 'api_keys_page',
    'access arguments' => ['access content'],
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'api_keys.form.inc',
    'file path' => drupal_get_path('module', 'galaxy_tool_generator_ui') . '/includes',
    'weight' => 3,
  ];
  $items['build_tool_repository'] = [
    'title' => 'Build Tool Repository',
    'description' => t('A page to view all Galaxy tool XMLs'),
    'page callback' => 'galaxy_tool_xml_all_page',
    'access arguments' => ['access content'],
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'galaxy_tool_xml_all.form.inc',
    'file path' => drupal_get_path('module', 'galaxy_tool_generator_ui') . '/includes',
    'weight' => 4,
  ];
  $items['planemo_test_tool'] = [
    'title' => 'Planemo Test Tool',
    'description' => t('Test tools with planemo'),
    'page callback' => 'planemo_test_tool_page',
    'access arguments' => ['access content'],
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'planemo_test_tool.form.inc',
    'file path' => drupal_get_path('module', 'galaxy_tool_generator_ui') . '/includes',
    'weight' => 4,
  ];
  $items['publish_tool_repository'] = [
    'title' => 'Publish tool repository',
    'description' => t('A page for publishing tool repository.'),
    'page callback' => 'publish_tool_repository_page',
    //    'access callback' => 'user_is_logged_in',
    'access arguments' => ['access content'],
    'menu_name' => 'main-menu',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'publish_tool_repository.form.inc',
    'file path' => drupal_get_path('module', 'galaxy_tool_generator_ui') . '/includes',
    'weight' => 5,
  ];

  return $items;
}


//function gtg_flowchart_page() {
//  $page_builder = [
//    'gtg_flowchart' => [
//      '#markup' => '<img src="https://github.com/MingChen0919/galaxy_tool_generator_ui/raw/master/images/gtg-flowchart.png"
//                         alt="GTG flowchart"
//                         width="80%"/>',
//    ],
//  ];
//
//  return $page_builder;
//}

/**
 * Page callback for all_tool_repositories page.
 */
function galaxy_tool_xml_all_page() {
  return drupal_get_form('galaxy_tool_xml_all_form');
}

/**
 * page callback for associate accounts.
 */
function api_keys_page() {
  return drupal_get_form('api_keys_form');
}

/**
 * page callback for planemo test tool page
 */
function planemo_test_tool_page() {
  $page_builder = [
    'planemo_test_tool_form' => drupal_get_form('planemo_test_tool_form'),
  ];

  return $page_builder;
}

/**
 * Page callback for publish_tool page.
 */
function publish_tool_repository_page() {
  // TODO: build a form to list all xml files and the galaxy tool directory it comes from
  $planemo_items = [
    'Create repository in test tool shed: <span style="color: #FF5666"><code>planemo shed_create --shed_target testtoolshed</code></span>',
    'Publish repository in test tool shed: <span style="color: #FF5666"><code>planemo shed_update --check_diff --shed_target testtoolshed</code></span>',
    'Create repository in tool shed: <span style="color: #FF5666"><code>planemo shed_create --shed_target toolshed</code></span>',
    'Publish repository in tool shed: <span style="color: #FF5666"><code>planemo shed_update --check_diff --shed_target toolshed</code></span>',
  ];
  $item_varialbe = [
    'items' => $planemo_items,
    'title' => '',
    'type' => 'ul'
  ];
  $page_builder = [
    'publish_with_planemo' => [
      '#markup' => 'The form below creates a <span style="color: #FF5666"><code>.planemo.yml</code></span> file and then use the ' .
        l('planemo tool', 'http://planemo.readthedocs.io/en/latest/publishing.html') .
        ' to publish the repository to <b>Tool Shed</b> or <b>Test Tool Shed</b>.<br/>' .
        'It uses the following command to create and/or update tool repository:<br/>' .
        theme('item_list', $item_varialbe),
    ],
    'form_1' => drupal_get_form('publish_tool_repository_form'),
    //    'form_2' => drupal_get_form('mirror_tool_repository_form'),
  ];

  return $page_builder;
}

/**
 * Implements hook_menu_alter().
 */
function galaxy_tool_generator_ui_menu_alter(&$items) {
  unset($items['node/%webform_menu/webform/components']);
  unset($items['node/%webform_menu/webform/conditionals']);
  unset($items['node/%webform_menu/webform/emails']);
  unset($items['node/%webform_menu/webform/configure']);
  $items['node/%webform_menu/webform']['title'] = 'XML components';
  $items['node/%node/view']['title'] = 'View/Update XML';
  $items['node/add/webform']['title'] = 'Tool XML';


  foreach (array_keys($items) as $menu_link) {
    // remove unneeded menu items for webform.
    if (preg_match('/webform-results/', $menu_link)) {
      unset($items[$menu_link]);
    }
  }

  // hide webform node edit page
  $items['node/%node/edit']['access callback'] = FALSE;
}


/**
 * @param $paths
 * implements hook_admin_paths_alter
 * disable admin overlay for creat webform page.
 */
function galaxy_tool_generator_ui_admin_paths_alter(&$paths) {
  //return FALSE to the path where you don't want to show in OVERLAY
  $paths['node/add/webform'] = FALSE;
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function galaxy_tool_generator_ui_form_webform_node_form_alter(&$form, &$form_state, $form_id) {
  // change field title from the form on the add-webform page
  $form['title'] = [
    '#type' => 'textfield',
    '#title' => t('XML file name'),
    '#description' => t('Galaxy tool XML file name with extension, e.g. <span style="color: #FF5666">hisat2.xml, bowtie2.xml</span>.'),
    '#required' => TRUE,
    '#maxlength' => 255,
    '#weight' => -5,
  ];
  $form['tool_description'] = [
    '#type' => 'textfield',
    '#title' => t('Tool description'),
    '#description' => t('Detailed information about this tool'),
    //    '#required' => TRUE,
  ];
  $form['start_with_tool_template'] = [
    '#type' => 'radios',
    '#title' => t('Start with a template XML'),
    '#options' => drupal_map_assoc([
      'Aurora Galaxy Tool',
      'Uploaded XML',
      'From scratch',
      'Use planemo tool_init',
    ]),
    '#default_value' => 'Aurora Galaxy Tool',
  ];
//  $form['rmarkdown_tool_type'] = [
//    '#type' => 'radios',
//    '#title' => t('R Markdown tool type'),
//    '#options' => [
//      'rmarkdown_report' => 'Single report',
//      'rmarkdown_website' => 'Website',
//    ],
//    '#description' => t('<b>Single report</b> tool outputs a single HTML document. <b>Website</b> tool outputs a static website.'),
//    '#default_value' => 'rmarkdown_report',
//    '#states' => [
//      'visible' => [
//        ':input[name="start_with_tool_template"]' => ['value' => 'R Markdown XML template'],
//      ],
//    ],
//  ];
  $form['start_with_uploaded_xml'] = [
    '#type' => 'managed_file',
    '#title' => t('Choose a Galaxy XML file'),
    '#states' => [
      'visible' => [
        ':input[name="start_with_tool_template"]' => ['value' => 'Uploaded XML'],
      ],
    ],
    '#upload_validators' => [
      'file_validate_extensions' => ['xml'],
    ],
  ];


  // start with planemo tool_init
  $form['start_with_planemo_tool_init'] = [
    '#type' => 'fieldset',
    '#title' => t('Start with planemo tool_init'),
    '#states' => [
      'visible' => [
        ':input[name="start_with_tool_template"]' => ['value' => 'Use planemo tool_init'],
      ],
    ],
  ];
  $form['start_with_planemo_tool_init']['id'] = [
    '#type' => 'textfield',
    '#description' => 'Short identifier for new tool (no whitespace)',
    '#title' => '<span style="color: #FF5666"><code>-i, --id</code></span>',
  ];
  $form['start_with_planemo_tool_init']['name'] = [
    '#type' => 'textfield',
    '#description' => 'Name for new tool (user facing)',
    '#title' => '<span style="color: #FF5666"><code>-n, --name</code></span>',
  ];
  $form['start_with_planemo_tool_init']['version'] = [
    '#type' => 'textfield',
    '#description' => 'Tool XML version',
    '#title' => '<span style="color: #FF5666"><code>--version</code></span>',
  ];
  $form['start_with_planemo_tool_init']['description'] = [
    '#type' => 'textfield',
    '#description' => 'Short description for new tool (user facing)',
    '#title' => '<span style="color: #FF5666"><code>-d, --description</code></span>',
  ];
  $form['start_with_planemo_tool_init']['command'] = [
    '#type' => 'textfield',
    '#description' => 'Command potentially including cheetah variables ()(e.g. \'seqtk seq -a $input > $output\')',
    '#title' => '<span style="color: #FF5666"><code>-c, --command</code></span>',
  ];
  $form['start_with_planemo_tool_init']['example_command'] = [
    '#type' => 'textfield',
    '#title' => '<span style="color: #FF5666"><code>--example_command</code></span>',
    '#description' => 'Example to command with paths to build Cheetah
                            template from (e.g. \'seqtk seq -a 2.fastq >
                            2.fasta\'). Option cannot be used with --command,
                            should be used --example_input and
                            --example_output.',
  ];
  $form['start_with_planemo_tool_init']['example_input'] = [
    '#type' => 'textfield',
    '#title' => '<span style="color: #FF5666"><code>--example_input</code></span>',
    '#description' => 'For use with --example_command, replace input file
                            (e.g. 2.fastq with a data input parameter).',
  ];
  $form['start_with_planemo_tool_init']['example_output'] = [
    '#type' => 'textfield',
    '#title' => '<span style="color: #FF5666"><code>--example_output</code></span>',
    '#description' => 'For use with --example_command, replace input file
                            (e.g. 2.fastq with a tool output).',
  ];
  $form['start_with_planemo_tool_init']['named_output'] = [
    '#type' => 'textfield',
    '#title' => '<span style="color: #FF5666"><code>--named_output</code></span>',
    '#description' => 'Create a named output for use with command block
                            for example specify --named_output=output1.bam and
                            then use \'-o $output1\' in your command block.',
  ];
  $form['start_with_planemo_tool_init']['input'] = [
    '#type' => 'textfield',
    '#title' => '<span style="color: #FF5666"><code>--input</code></span>',
    '#description' => 'An input description (e.g. input.fasta)',
  ];
  $form['start_with_planemo_tool_init']['output'] = [
    '#type' => 'textfield',
    '#title' => '<span style="color: #FF5666"><code>--output</code></span>',
    '#description' => 'An output location (e.g. output.bam), the Galaxy
                            datatype is inferred from the extension.',
  ];
  $form['start_with_planemo_tool_init'][''] = [
    '#type' => 'textfield',
    '#title' => '<span style="color: #FF5666"><code>--</code></span>',
    '#description' => '',
  ];
  $form['start_with_planemo_tool_init'][''] = [
    '#type' => 'textfield',
    '#title' => '<span style="color: #FF5666"><code>--</code></span>',
    '#description' => '',
  ];
  $form['start_with_planemo_tool_init'][''] = [
    '#type' => 'textfield',
    '#title' => '<span style="color: #FF5666"><code>--</code></span>',
    '#description' => '',
  ];
  $form['start_with_planemo_tool_init'][''] = [
    '#type' => 'textfield',
    '#title' => '<span style="color: #FF5666"><code>--</code></span>',
    '#description' => '',
  ];




  // add submit handler
  $form['actions']['submit']['#submit'][] = 'create_galaxy_tool';
  // add form validator
  $form['#validate'][] = 'create_galaxy_tool_form_validate';
  // unset preview button
  unset($form['actions']['preview']);

}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function galaxy_tool_generator_ui_form_node_delete_confirm_alter(&$form, &$form_state, $form_id) {
  // add a new submission function 'node_delete_confirm_delete_xml' to delete corresponding xml file.
  // this function has to be run after the original submit function 'node_delete_confirm_submit', which delete the webform node.
  $form['#submit'] = [
    'node_delete_confirm_delete_xml',
    'node_delete_confirm_submit',
    'node_delete_confirm_redirect',
  ];
  //  $form['description']['#markup'] = '<span style="color: #FF5666">This action cannot be undone. If all XML
  //    files from a tool repository are deleted, the tool repository will be removed.</span>';
  $form['actions']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Delete XML'),
  ];
}

/**
 * submit function to delete xml file when a webform node is deleted.
 */
function node_delete_confirm_delete_xml(&$form, &$form_state) {

  $nid = $form['#node']->nid;
  // after a webform node is deleted, the variable registered_xml_nids needs to
  // be updated.
  $registered_xml_nids = variable_get('registered_xml_nids', []);
  unset($registered_xml_nids[$nid]);
  variable_set('registered_xml_nids', $registered_xml_nids);
  $res = db_select('node', 'n')
    ->fields('n')
    ->condition('nid', $nid)
    ->execute()
    ->fetchAssoc();
  // delete xml file
  $xml_file = file_load($res['tool_xml_fid']);
  if ($xml_file) {
    file_delete($xml_file);
  }
}


/**
 * submit callback which runs after the original submit callback
 * 'node_delete_confirm_submit'. The goal is to redirect page to the all tool
 * repositories page, instead of the front page by default.
 */
function node_delete_confirm_redirect(&$form, &$form_state) {
  $form_state['redirect'] = 'build_tool_repository';
}

/**
 * webform_node_form form submitter.
 */
function create_galaxy_tool($form, &$form_state) {

  // add galaxy_tool_name to node table for later use.
  db_update('node')
    ->fields([
      'galaxy_tool_xml_name' => $form_state['values']['title'],
      'tool_description' => $form_state['values']['tool_description'],
      'tool_xml_type' => $form_state['values']['start_with_tool_template'],
    ])
    ->condition('nid', $form_state['values']['nid'])
    ->execute();

  // use default Aurora Galaxy Tool XML file
  // add default components to webform_component table if choose to start with tool template
  if ($form_state['values']['start_with_tool_template'] == 'Aurora Galaxy Tool') {
//    if ($form_state['values']['rmarkdown_tool_type'] == 'rmarkdown_report') {
//      $template_webform_components = convert_xml_to_webform_components(RMARKDOWN_REPORT_XML);
//    }
//    else {
//      $template_webform_components = convert_xml_to_webform_components(RMARKDOWN_WEBSITE_XML);
//    }

    $rmarkdown_report_xml = drupal_get_path('module', 'galaxy_tool_generator_ui') . '/aurora_tool_templates/rmarkdown_report.xml';
    $template_webform_components = convert_xml_to_webform_components($rmarkdown_report_xml);
    foreach ($template_webform_components as $component) {
      $component['nid'] = $form_state['values']['nid'];
      db_insert('webform_component')
        ->fields($component)
        ->execute();
    }
  }

  // use uploaded XML file
  if ($form_state['values']['start_with_tool_template'] == 'Uploaded XML') {
    $fid = $form_state['values']['start_with_uploaded_xml'];
    $uri = file_load($fid)->uri;
    // build components from uploaded xml file.
    $webform_components = convert_xml_to_webform_components($uri);

    foreach ($webform_components as $component) {
      $component['nid'] = $form_state['values']['nid'];
      db_insert('webform_component')
        ->fields($component)
        ->execute();
    }
  }

}

/**
 * Create galaxy tool form validator
 */
function create_galaxy_tool_form_validate($form, &$form_state) {
  //==========validate xml file name========
  if (!preg_match('/^[a-z]+[a-z0-9_]*\.xml/', $form_state['values']['title'])) {
    form_set_error('', t('File name can only contains <span style="color: #FF5666">"a-z"</span>, 
        <span style="color: #FF5666">"0-9"</span> and <span style="color: #FF5666">"_"</span>, 
        and starts with letters and ends with exsion <span style="color: #FF5666">.xml</span>'));
  }
}

/**
 * implement hook_node_view_alter().
 */
function galaxy_tool_generator_ui_node_view_alter(&$build) {
  // TODO: display xml file name and galaxy tool name (which directory the xml file comes from)
  // TODO: write XML components into XML file
}

/**
 * @param $node
 * @param $view_mode
 * @param $langcode
 *
 * implement hook_node_view
 *
 */
function galaxy_tool_generator_ui_node_view($node, $view_mode, $langcode) {
  global $user;

  if (!isset($node->webform)) {
    return;
  }
  // get galaxy tool xml file name;
  $query = db_select('node', 'n')
    ->fields('n')
    ->condition('nid', $node->nid, '=')
    ->execute()
    ->fetchAssoc();

  // if tool_command.sh exists, replace tool command text value with content from tool_command.sh
  // tool_command.sh = 'public://galaxy_tool_repository/tool_command.sh'
  if (isset($node->webform)) {
    get_tool_command_string_from_sh($node);
  }

  // create a directory to store all galaxy tool xml files
  $galaxy_tool_xml_dir = 'public://galaxy_tool_XMLs';
  file_prepare_directory($galaxy_tool_xml_dir, FILE_CREATE_DIRECTORY);
  // write xml components into xml file.
  $xml_file_path = $galaxy_tool_xml_dir . '/' . $query['galaxy_tool_xml_name'];

  $xml = build_galaxy_tool_xml($node->webform['components']);
  // remove version tag from xml string
  $xml_no_version_tag = str_replace("<?xml version=\"1.0\"?>\n", '', $xml);
  // save xml string to a file and create a database entry
  $file = file_save_data($xml_no_version_tag, $xml_file_path, FILE_EXISTS_REPLACE);
  // insert xml file info into node table
  db_update('node')
    ->fields([
      'tool_xml_fid' => $file->fid,
      'tool_xml_uri' => $file->uri,
    ])
    ->condition('nid', $node->nid)
    ->execute();
}